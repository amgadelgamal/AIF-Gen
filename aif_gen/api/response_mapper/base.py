from abc import ABC, abstractmethod
from typing import Any

from aif_gen.task import AlignmentTask


class ResponseMapperBase(ABC):
    ETHICAL_GUIDELINES: str = """Ensure that the generated response adheres to ethical practices, avoids biases, and respects the target audience's needs.\n"""

    @abstractmethod
    def generate_prompt(
        self,
        task: AlignmentTask,
        task_prompt: str,
        num_samples: int,
        *args: Any,
        **kwargs: Any,
    ) -> str:
        r"""Generate a prompt that, when given to a language model, produces num_samples (chosen, rejected)
        response pairs for the task_prompt and AlignmentTask.

        Args:
            task (AlignmentTask): The alignment task containing the domain, objective, and preferences.
            task_prompt (str): The task prompt to generated responses to. Typically generated by the PromptMapper.
            num_samples (int): The number of (chosen response, rejected response) pairs to generate.
            args (Any): Optional positional arguments.
            kwargs (Any): Optional keyword arguments.

        Returns:
            str: A structured prompt string for the LLM.
        """

    def __str__(self) -> str:
        r"""Returns the type of ResponseMapper."""
        return self.__class__.__name__
